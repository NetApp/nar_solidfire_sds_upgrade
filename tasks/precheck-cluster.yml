---
- include_tasks: sds-precheck-cluster.yml
  when: node_type == "SFc100"

- name: Check cluster conditions that may block upgrade
  delegate_to: localhost
  run_once: True
  block:
    - name: Ensure we know the current cluster version
      include_tasks: cluster-api.yml
      vars:
        http_method: GET
        url_cmd: "method=GetClusterVersionInfo"

    - set_fact:
        precheck_clus_ver_resp: "{{ clus_api_response }}"
        sf_installed_pkg_ver: "{{ clus_api_response.json.result.clusterVersion }}"

    - name: Ensure we fail if the current cluster version is lower than minimum version supported
      fail:
        msg: "Ths tool requires cluster version to be at least {{ sf_api_version }}"
      when: sf_installed_pkg_ver is version( sf_api_version, '<' )

    - name: Ensure we fail if the user is trying to downgrade
      fail:
        msg: "The new version ({{ sf_new_pkg_ver }}) is lower than the installed version ({{ sf_installed_pkg_ver }}). Downgrade is not supported"
      when: sf_installed_pkg_ver is version( sf_new_pkg_ver, '>' )

    - name: Ensure we continue with success status if the requested version is already installed
      set_fact:
        sf_final_status: "success"
      when: sf_installed_pkg_ver is version( sf_new_pkg_ver, '=' )
      
    - name: "Ensure we keep a record if some nodes are already running the requested version {{ sf_new_pkg_ver }}"
      set_fact:
        sf_already_upgraded: "{{ sf_already_upgraded + [sf_node_id_name_map[item.nodeID]] }}"
      when: item.nodeVersion == sf_new_pkg_ver
      loop_control: 
        label: "{{ item.nodeID }}"
      with_items: "{{ precheck_clus_ver_resp.json.result.clusterVersionInfo }}"

    - name: "Ensure we know previously upgraded nodes already running v{{ sf_new_pkg_ver }}"
      debug:
        var: sf_already_upgraded

    - name: Retrieve cluster faults
      include_tasks: cluster-api.yml
      vars:
        http_method: GET
        url_cmd: "method=ListClusterFaults&faultTypes=current"

    - name: Check if anything could block upgrade if fault list is not empty
      set_fact:
        sf_blocking_faults: "{{ sf_blocking_faults + [item.code] }}"
      when: item.blocksUpgrade == true and item.resolved == false
      with_items: "{{ clus_api_response.json.result.faults }}"

    - name: Print upgrade-blocking faults
      debug:
        var: sf_blocking_faults

    - name: Ensure we quit if any upgrade-blocking fault exists and not to be ignored
      fail:
        msg: "Please resolve the above cluster faults then try again"
      when: sf_blocking_faults|length > 0 and not yes_i_want_to_ignore_cluster_faults

    - name: Ensure we continue if any upgrade-blocking fault exists but user chose to ignore it
      debug:
        msg: "Force to continue because user has set a variable to ignore the cluster faults"
      when: sf_blocking_faults|length > 0 and yes_i_want_to_ignore_cluster_faults
